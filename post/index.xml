<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 卢队长的博客</title>
    <link>http://luwen.tech/post/</link>
    <description>Recent content in Posts on 卢队长的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 18 May 2022 15:31:07 +0800</lastBuildDate><atom:link href="http://luwen.tech/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Http缓存流程</title>
      <link>http://luwen.tech/post/http%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Wed, 18 May 2022 15:31:07 +0800</pubDate>
      
      <guid>http://luwen.tech/post/http%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B/</guid>
      <description>一、什么是HTTP缓存 HTTP缓存属于私有缓存，只能用于单独用户。你可能已经见过浏览器设置中的“缓存”选项。浏览器缓存拥有用户通过 HTTP 下载的所有文档。这些缓存为浏览过的文档提供向后/向前导航，保存网页，查看源码等功能，可以避免再次向服务器发起多余的请求。它同样可以提供缓存内容的离线</description>
    </item>
    
    <item>
      <title>经过waf等代理后获取客户端真实ip</title>
      <link>http://luwen.tech/post/%E7%BB%8F%E8%BF%87waf%E7%AD%89%E4%BB%A3%E7%90%86%E5%90%8E%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9Eip/</link>
      <pubDate>Tue, 07 Sep 2021 09:49:52 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E7%BB%8F%E8%BF%87waf%E7%AD%89%E4%BB%A3%E7%90%86%E5%90%8E%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9C%9F%E5%AE%9Eip/</guid>
      <description>参考文档： https://www.alibabacloud.com/help/zh/doc-detail/42205.htm</description>
    </item>
    
    <item>
      <title>Golang学习之特殊用法</title>
      <link>http://luwen.tech/post/golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 18 Aug 2021 23:04:32 +0800</pubDate>
      
      <guid>http://luwen.tech/post/golang%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%89%B9%E6%AE%8A%E7%94%A8%E6%B3%95/</guid>
      <description>1.类型断言 2.函数接受者</description>
    </item>
    
    <item>
      <title>Golang学习之map</title>
      <link>http://luwen.tech/post/golang%E5%AD%A6%E4%B9%A0%E4%B9%8Bmap/</link>
      <pubDate>Sat, 07 Aug 2021 22:51:10 +0800</pubDate>
      
      <guid>http://luwen.tech/post/golang%E5%AD%A6%E4%B9%A0%E4%B9%8Bmap/</guid>
      <description>map: 字典，映射 key要求：唯一，无序，不能是引用类型，（不可以是函数类型，字典类型，切片类型） map不能使用cap() ###map的创建和初始化 ####创建方式： 1. var m1 map[int]string --不能存储数据 2. m2 := map[int]string{} --能存储数据 3. m3 := make(map[int]string) --默认len为0 4. m4 := make(map[int]string) --默认 初始化 1. var m map[int]string = map[int]string{1: &amp;quot;aaa&amp;quot;, 2: &amp;quot;bbb&amp;quot;} 保证ke</description>
    </item>
    
    <item>
      <title>Devops建设</title>
      <link>http://luwen.tech/post/devops%E5%BB%BA%E8%AE%BE/</link>
      <pubDate>Mon, 02 Aug 2021 16:05:29 +0800</pubDate>
      
      <guid>http://luwen.tech/post/devops%E5%BB%BA%E8%AE%BE/</guid>
      <description>devops建设</description>
    </item>
    
    <item>
      <title>Thanos&#43;prometheus监控跨地域多集群</title>
      <link>http://luwen.tech/post/thanos&#43;prometheus%E7%9B%91%E6%8E%A7%E8%B7%A8%E5%9C%B0%E5%9F%9F%E5%A4%9A%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Thu, 22 Jul 2021 10:19:49 +0800</pubDate>
      
      <guid>http://luwen.tech/post/thanos&#43;prometheus%E7%9B%91%E6%8E%A7%E8%B7%A8%E5%9C%B0%E5%9F%9F%E5%A4%9A%E9%9B%86%E7%BE%A4/</guid>
      <description>##Thanos架构和组件 ###Thanos架构图 Thanos两种架构图，一种sidecar，一种receive，一般用sidecar方式较多 Receiver 是做什么的呢？为什么需要 Receiver？它跟 Sidecar 有什么区别？ 它们都可以将数据上传到对象存储以供长期保存，区别在于最新数据的存储。 由于数据</description>
    </item>
    
    <item>
      <title>端到端监控</title>
      <link>http://luwen.tech/post/%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Wed, 21 Jul 2021 21:37:18 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9B%91%E6%8E%A7/</guid>
      <description>end-to-end 端端 Peer-to-peer p2p，点对点 Point-to-point 定义： 在复杂的应用环境下，精确定位部署在云端应用性能问题根源的技术手段： 1.从移动端到服务端的端到端监控 2.从网络到服务端的端到端监控 3.从浏览器端到服务端的端到端监控 4.从服务端跨语言跨应用的端到端监控 解决的问题： 1.追溯性能问题根源 2.性能问题界定，协</description>
    </item>
    
    <item>
      <title>监控</title>
      <link>http://luwen.tech/post/%E7%9B%91%E6%8E%A7/</link>
      <pubDate>Thu, 15 Jul 2021 14:41:16 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E7%9B%91%E6%8E%A7/</guid>
      <description>###USE 原则指的是，按照如下三个维度来规划资源监控指标： 利用率（Utilization），资源被有效利用起来提供服务的平均时间占比； 饱和度（Saturation），资源拥挤的程度，比如工作队列的长度； 错误率（Errors），错误的数量。 ###RED 原则指的是，按照如下三个维度来规划服务监控指标：</description>
    </item>
    
    <item>
      <title>Kubernetes服务优雅升级</title>
      <link>http://luwen.tech/post/Kubernetes%E6%9C%8D%E5%8A%A1%E4%BC%98%E9%9B%85%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Wed, 07 Jul 2021 22:31:14 +0800</pubDate>
      
      <guid>http://luwen.tech/post/Kubernetes%E6%9C%8D%E5%8A%A1%E4%BC%98%E9%9B%85%E5%8D%87%E7%BA%A7/</guid>
      <description>k8s本身就支持服务滚动升级，但是如果程序没有正确的处理退出信号时，就会导致部分请求直接被中断从而影响用户体验。 先来回顾下 k8s 的滚动升级步骤： 启动一个新的 pod 等待新的 pod 进入 Ready 状态 创建 Endpoint，将新的 pod 纳入负载均衡 移除与老 pod 相关的 Endpoint，并且将老 pod 状态设置为 Termi</description>
    </item>
    
    <item>
      <title>Php Fpm参数设置</title>
      <link>http://luwen.tech/post/php-fpm%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 28 Jun 2021 22:38:32 +0800</pubDate>
      
      <guid>http://luwen.tech/post/php-fpm%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</guid>
      <description>php-fpm参数设置</description>
    </item>
    
    <item>
      <title>Centos7安装apisix</title>
      <link>http://luwen.tech/post/centos7%E5%AE%89%E8%A3%85apisix/</link>
      <pubDate>Wed, 28 Apr 2021 16:58:24 +0800</pubDate>
      
      <guid>http://luwen.tech/post/centos7%E5%AE%89%E8%A3%85apisix/</guid>
      <description>1.rpm安装 yum install yum-utils yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo yum install -y openresty curl git gcc openresty-openssl111-devel unzip #如果服务器安装了kong这步会有冲突，需要先卸载kong rpm -e kong-community-edition-1.1.0-1.noarch 然后继续安装 yum install -y https://github.com/apache/apisix/releases/download/2.5/apisix-2.5-0.x86_64.rpm 安装dashboard yum install https://github.com/apache/apisix-dashboard/releases/download/v2.6/apisix-dashboard-2.6-0.x86_64.rpm 2.修改配置文件 cd /usr/local/apisix/conf/ config-default.yaml conf.yaml tips:etcd是集群的话就填集群的client地址，如： etcd: host: # it&#39;s possible to define multiple etcd hosts addresses of the same etcd cluster. - &amp;quot;http://172.16.100.23:2379&amp;quot; # multiple</description>
    </item>
    
    <item>
      <title>Pod修改时区</title>
      <link>http://luwen.tech/post/pod%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</link>
      <pubDate>Wed, 28 Apr 2021 10:18:41 +0800</pubDate>
      
      <guid>http://luwen.tech/post/pod%E4%BF%AE%E6%94%B9%E6%97%B6%E5%8C%BA/</guid>
      <description>1.挂载服务器的时区 [root@k8s-m ~]# cat demo-pod.yaml apiVersion: v1 kind: Pod metadata: name: nginx-pod namespace: default labels: app: my-pod spec: containers: - name: my-pod image: nginx volumeMounts: - name: host-time mountPath: /etc/localtime readOnly: true volumes: - name: host-time hostPath: path: /etc/localtime 2.传递变量 [root@k8s-m ~]# cat time-pod.yaml apiVersion: v1 kind: Pod metadata: name: pod-env-tz spec: containers: - name: ngx-time image: nginx:latest env: - name: TZ value: Asia/Shanghai 3.重新构建镜像，做镜像时候将时区改对 4.修改apiserver的配置清单，用Pod Pres方式更改所有容器的时区</description>
    </item>
    
    <item>
      <title>Etcd集群部署</title>
      <link>http://luwen.tech/post/etcd%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 27 Apr 2021 15:06:08 +0800</pubDate>
      
      <guid>http://luwen.tech/post/etcd%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid>
      <description>环境：centos 7，集群部署 下载etcd https://github.com/etcd-io/etcd/releases/download/v3.4.15/etcd-v3.4.15-linux-amd64 tar xvf etcd-v3.4.15-linux-amd64 mv etcd etcdctl /usr/bin/ 设置开机自动启动 vim /usr/lib/systemd/system/etcd.service Description=Etcd Server After=network.target After=network-online.target Wants=network-online.target [Service] Type=notify WorkingDirectory=/var/lib/etcd/ EnvironmentFile=-/etc/etcd/etcd.conf User=etcd ExecStart=/usr/bin/etcd Restart=on-failure LimitNOFILE=65536 [Install] WantedBy=multi-user.target 配置etcd Server mkdir -p /etc/etcd /var/lib/etcd useradd -s /sbin/nologin etcd chown etcd:etcd /var/lib/etcd vim /etc/etcd/etcd.conf etcd-01 ETCD_DATA_DIR=&amp;quot;/var/lib/etcd/default.etcd&amp;quot; ETCD_LISTEN_PEER_URLS=&amp;quot;http://172.16.100.23:2380&amp;quot; ETCD_LISTEN_CLIENT_URLS=&amp;quot;http://172.16.100.23:2379,http://127.0.0.1:2379&amp;quot; ETCD_NAME=&amp;quot;apisix-etcd-01&amp;quot; ALLOW_NONE_AUTHENTICATION=yes ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;http://172.16.100.23:2380&amp;quot; ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;http://172.16.100.23:2379,http://127.0.0.1:2379&amp;quot; ETCD_INITIAL_CLUSTER=&amp;quot;apisix-etcd-01=http://172.16.100.23:2380,apisix-etcd-02=http://172.16.100.30:2380,apisix-etcd-03=http://172.16.100.31:2380&amp;quot; ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;apisix-etcd-cluster-token&amp;quot; ETCD_INITIAL_CLUSTER_STATE=&amp;quot;new&amp;quot; ETCD_ENABLE_V2=&amp;quot;true&amp;quot; etcd-02 ETCD_DATA_DIR=&amp;quot;/var/lib/etcd/default.etcd&amp;quot; ETCD_LISTEN_PEER_URLS=&amp;quot;http://172.16.100.30:2380&amp;quot; ETCD_LISTEN_CLIENT_URLS=&amp;quot;http://172.16.100.30:2379,http://127.0.0.1:2379&amp;quot; ETCD_NAME=&amp;quot;apisix-etcd-02&amp;quot; ALLOW_NONE_AUTHENTICATION=yes ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;http://172.16.100.30:2380&amp;quot; ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;http://172.16.100.30:2379,http://127.0.0.1:2379&amp;quot; ETCD_INITIAL_CLUSTER=&amp;quot;apisix-etcd-01=http://172.16.100.23:2380,apisix-etcd-02=http://172.16.100.30:2380,apisix-etcd-03=http://172.16.100.31:2380&amp;quot; ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;apisix-etcd-cluster-token&amp;quot; ETCD_INITIAL_CLUSTER_STATE=&amp;quot;new&amp;quot; ETCD_ENABLE_V2=&amp;quot;true&amp;quot; etcd-03 ETCD_DATA_DIR=&amp;quot;/var/lib/etcd/default.etcd&amp;quot; ETCD_LISTEN_PEER_URLS=&amp;quot;http://172.16.100.31:2380&amp;quot; ETCD_LISTEN_CLIENT_URLS=&amp;quot;http://172.16.100.31:2379,http://127.0.0.1:2379&amp;quot; ETCD_NAME=&amp;quot;apisix-etcd-03&amp;quot; ALLOW_NONE_AUTHENTICATION=yes ETCD_INITIAL_ADVERTISE_PEER_URLS=&amp;quot;http://172.16.100.31:2380&amp;quot; ETCD_ADVERTISE_CLIENT_URLS=&amp;quot;http://172.16.100.31:2379,http://127.0.0.1:2379&amp;quot; ETCD_INITIAL_CLUSTER=&amp;quot;apisix-etcd-01=http://172.16.100.23:2380,apisix-etcd-02=http://172.16.100.30:2380,apisix-etcd-03=http://172.16.100.31:2380&amp;quot; ETCD_INITIAL_CLUSTER_TOKEN=&amp;quot;apisix-etcd-cluster-token&amp;quot; ETCD_INITIAL_CLUSTER_STATE=&amp;quot;new&amp;quot; 启动集群 要三台同时启动，不然起不来 systemctl start etcd 查看集群成员 etcdctl member list 查看</description>
    </item>
    
    <item>
      <title>阿里云k8s支持低版本tls</title>
      <link>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%94%AF%E6%8C%81%E4%BD%8E%E7%89%88%E6%9C%ACtls/</link>
      <pubDate>Fri, 16 Apr 2021 19:59:12 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%94%AF%E6%8C%81%E4%BD%8E%E7%89%88%E6%9C%ACtls/</guid>
      <description>报错信息：Received fatal alert: protocol_version？ 原因：默认K8S里的Ingress只开放了TLS 1.2，有的客户端，java 版本1.8以下，要tls1.0，tls1.1的版本。解决办法： ### kubectl get cm -n kube-system nginx-configuration 编辑这个cm 增加： kind: ConfigMap apiVersion: v1 metadata: name: nginx-config data: ssl-ciphers: &amp;quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA&amp;quot; ssl-protocols: &amp;quot;TLSv1 TLSv1.1 TLSv1.2 TLSv1.3&amp;quot; 增加： ssl-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA ssl-protocols TLSv1 TLSv1.1</description>
    </item>
    
    <item>
      <title>K8s部署高可用nacos服务</title>
      <link>http://luwen.tech/post/k8s%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8nacos%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Sun, 11 Apr 2021 10:44:06 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8nacos%E6%9C%8D%E5%8A%A1/</guid>
      <description>基于kubernetes部署，存储使用阿里云的nas，数据库是用阿里云的rds 因为nacos要高可用，这里部署为StatefulSet，组成nacos集群。首先创建NAS动态存储卷，要创建NAS动态存储卷，首先要安装alicloud-nas-controller。 ####安装al</description>
    </item>
    
    <item>
      <title>Helm安装sentry</title>
      <link>http://luwen.tech/post/helm%E5%AE%89%E8%A3%85sentry/</link>
      <pubDate>Tue, 06 Apr 2021 23:56:07 +0800</pubDate>
      
      <guid>http://luwen.tech/post/helm%E5%AE%89%E8%A3%85sentry/</guid>
      <description>centos 7 安装postgresql 12 + redis 安装postgresql12 yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm yum install -y postgresql12 postgresql12-server /usr/pgsql-12/bin/postgresql-12-setup initdb systemctl start postgresql-12 systemctl enbale postgresql-12 修改posgresql配置 vim /var/lib/pgsql/12/data/postgresql.conf listen_addresses = &#39;内网ip&#39; vim /var/lib/pgsql/12/data/pg_hba.conf host all all 172.16.0.0/12 trust 创建sentry库 su - postgres ALTER USER postgres WITH PASSWORD &#39;isdlfjlsjflsjdfX&#39;; #创建用户密码 CREATE DATABASE sentry; GRANT ALL PRIVILEGES ON DATABASE sentry TO postgres; \l 列出数据库 \c 连接数据库 \dt 列出表 redis 安装略 下载char</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>http://luwen.tech/post/Pod%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E6%9A%B4%E9%9C%B2%E7%9A%84%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 19 Mar 2021 23:28:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/Pod%E8%AE%BF%E9%97%AE%E8%87%AA%E5%B7%B1%E6%9A%B4%E9%9C%B2%E7%9A%84%E6%9C%8D%E5%8A%A1/</guid>
      <description>问题现象： Pod无法访问自己暴露的服务，存在时好时坏或者调度到自己就出问题的现象。 ##问题原因： Flannel目前默认不允许回环访问。 ##解决方法： 使用Headless Service暴露服务和访问 重建集群使用Terway的网络插件 修改Flannel的配置，然后重建Flannel和</description>
    </item>
    
    <item>
      <title>Php内存泄露</title>
      <link>http://luwen.tech/post/php%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Fri, 19 Mar 2021 23:24:03 +0800</pubDate>
      
      <guid>http://luwen.tech/post/php%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</guid>
      <description>php内存限制 #####一般我们通过修改php.ini的memory_limit来限制php进程内存大小，但是这个限制可以被突破，通过代码： ini_set(&#39;memory_limit&#39;, &#39;2048M&#39;); #限制内存最大2048M ini_set(&amp;quot;memory_limit&amp;quot;,-1); #放开脚本内存限制 #####我们可以通过修改php-fpm的参数来限制php-fpm的最大内存，这样可以解决内</description>
    </item>
    
    <item>
      <title>悲观锁和乐观锁</title>
      <link>http://luwen.tech/post/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</link>
      <pubDate>Thu, 18 Mar 2021 10:09:57 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E6%82%B2%E8%A7%82%E9%94%81%E5%92%8C%E4%B9%90%E8%A7%82%E9%94%81/</guid>
      <description>乐观锁和悲观锁概念 一、并发控制 当程序中可能出现并发的情况时，就需要保证在并发情况下数据的准确性，以此确保当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。这种手段就叫做并发控制。并发控制的目的是保证一个用户的工作不会对另一个用户的工作产生不合理的影响。 没有做</description>
    </item>
    
    <item>
      <title>Brew使用</title>
      <link>http://luwen.tech/post/brew%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 16 Mar 2021 22:09:06 +0800</pubDate>
      
      <guid>http://luwen.tech/post/brew%E4%BD%BF%E7%94%A8/</guid>
      <description>Mac 下brew 安装更新报错 git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow fatal: unable to access &#39;https://github.com/Homebrew/homebrew-core/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 fatal: unable to access &#39;https://github.com/Homebrew/homebrew-cask/&#39;: LibreSSL SSL_connect: SSL_ERROR_SYSCALL in connection to github.com:443 解决办法 git config --global --unset http.proxy git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask fetch --unshallow 查看git 配置 git config --global --list</description>
    </item>
    
    <item>
      <title>Php Fpm三种模式</title>
      <link>http://luwen.tech/post/php-fpm%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 16 Jan 2021 00:56:40 +0800</pubDate>
      
      <guid>http://luwen.tech/post/php-fpm%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F/</guid>
      <description>##Php 内存释放策略： 1.定时任务重启 0 0 * * * systemctl reload php-fpm ###2. 配置参数 pm三种进程管理模式 pm = static，始终保持一个固定数量的子进程，这个数由pm.max_children定义，这种方式很不灵活，也通常不是默认的。 pm = dynamic，启动时会产生固定数量的子进程（由pm.start_se</description>
    </item>
    
    <item>
      <title>Docker镜像清理</title>
      <link>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E6%B8%85%E7%90%86/</link>
      <pubDate>Fri, 15 Jan 2021 23:57:37 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E6%B8%85%E7%90%86/</guid>
      <description>###1.dangling是一种特殊的，不会再被使用到的镜像，docker有专门清理dangling镜像的命令 docker image prune -f ###2.历史版本镜像直接使用docker删除镜像的命令即可 docker rmi [image] ###3.可以批量清除无用的镜像，且不会影响使用中的镜像和基础镜像 docker images | awk &#39;NR!=1{print $1&amp;quot;:&amp;quot;$2}&#39; | xargs docker rmi ###4.</description>
    </item>
    
    <item>
      <title>Php Fpm平滑重启</title>
      <link>http://luwen.tech/post/php-fpm%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF/</link>
      <pubDate>Fri, 15 Jan 2021 23:40:40 +0800</pubDate>
      
      <guid>http://luwen.tech/post/php-fpm%E5%B9%B3%E6%BB%91%E9%87%8D%E5%90%AF/</guid>
      <description>nginx平滑重启 systemctl reload nginx 原理 /bin/kill -s HUP 主id php-fpm重启 systemctl reload php-fpm 原理 /bin/kill -USR2 主进程id 但是php-fpm在实际使用中用kill -USR2重启会出现短时间的502,解决办法： [2013-02-13 15:57 UTC] phpbugs at oops dot mooo dot com Try setting process_control_timeout to something higher than 0. 描述：process_control_timeout是留给子进程处理来自ma</description>
    </item>
    
    <item>
      <title>Lua安装luasql Mysql</title>
      <link>http://luwen.tech/post/lua%E5%AE%89%E8%A3%85luasql-mysql/</link>
      <pubDate>Tue, 24 Nov 2020 11:22:03 +0800</pubDate>
      
      <guid>http://luwen.tech/post/lua%E5%AE%89%E8%A3%85luasql-mysql/</guid>
      <description>yum install mariadb-devel -y ln -s /usr/lib64/mysql/libmysqlclient.so /usr/lib64/libmysqlclient.so luarocks install luasql-mysql MYSQL_INCDIR=/usr/include/mysql</description>
    </item>
    
    <item>
      <title>Centos7配置ftp</title>
      <link>http://luwen.tech/post/centos7%E9%85%8D%E7%BD%AEftp/</link>
      <pubDate>Tue, 17 Nov 2020 09:14:35 +0800</pubDate>
      
      <guid>http://luwen.tech/post/centos7%E9%85%8D%E7%BD%AEftp/</guid>
      <description>1.安装 yum -y install vsftpd 修改配置文件/etc/vsftpd/vsftpd.conf anonymous_enable=NO local_enable=YES write_enable=YES local_umask=022 dirmessage_enable=YES xferlog_enable=YES connect_from_port_20=YES xferlog_std_format=YES chroot_local_user=NO chroot_list_enable=YES chroot_list_file=/etc/vsftpd/chroot_list allow_writeable_chroot=YES listen=YES ftpd_banner=”welcome test Ftp Server.” pam_service_name=vsftpd #设置PAM使用的名称,该名称就是/etc/pam.d/目录下vsfptd文件的文件名 userlist_enable=YES tcp_wrappers=YES local_root=/home/www/test/upload/ virtual_use_local_privs=YES guest_enable=YES #表示是否开启vsft</description>
    </item>
    
    <item>
      <title>Sql学习</title>
      <link>http://luwen.tech/post/sql%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Fri, 06 Nov 2020 16:54:58 +0800</pubDate>
      
      <guid>http://luwen.tech/post/sql%E5%AD%A6%E4%B9%A0/</guid>
      <description>廖雪峰的sql</description>
    </item>
    
    <item>
      <title>小程序防盗链</title>
      <link>http://luwen.tech/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%98%B2%E7%9B%97%E9%93%BE/</link>
      <pubDate>Mon, 12 Oct 2020 14:24:21 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%98%B2%E7%9B%97%E9%93%BE/</guid>
      <description>开启防盗链后，小程序访问就不显示图片了。如何解决？ 在白名单中添加servicewechat.com就行了 就是添加servicewechat.com域名到许可域名中，就好了。 我们在进行小程序开发的时候，接口中的图片如果实现了防盗链，那么可能图片无法显示。 如果不防盗链的话，万一被人抓</description>
    </item>
    
    <item>
      <title>Jenkins增加k8s云配置</title>
      <link>http://luwen.tech/post/jenkins%E5%A2%9E%E5%8A%A0k8s%E4%BA%91%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 22 Sep 2020 23:33:52 +0800</pubDate>
      
      <guid>http://luwen.tech/post/jenkins%E5%A2%9E%E5%8A%A0k8s%E4%BA%91%E9%85%8D%E7%BD%AE/</guid>
      <description>###1.根据k8s kubeconfig文件生成cert.pfx #certificate-authority-data echo testtestsetstststsetetetttttttttttttttttttttttttt |base64 -d &amp;gt; ca.crt #client-certificate-data echo wengehenshuaiwewenwenrnwenrnwnrwnenrwenrnwenrnwenrwnenrer |base64 -d &amp;gt; client.crt #client-key-data echo wengetehaobangdabangzigansinisfjldjflsjlafdjldjfljdlfkjlsjdfdfs |base64 -d &amp;gt; client.key openssl pkcs12 -export -out cert.pfx -inkey client.key -in client.crt -certfile ca.crt ###2.将cert.pfx文件导入jenkins生成凭据 tips:密码是上面生成cert.pfx设置的密码 ![image-20200922235928690](/Users/luwen/Library/Application Support/typora-user-images/image-20200922235928690.png) 3.增加k8s云 tips:k8s服务证书</description>
    </item>
    
    <item>
      <title>优秀的golang学习网址</title>
      <link>http://luwen.tech/post/%E4%BC%98%E7%A7%80%E7%9A%84golang%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</link>
      <pubDate>Fri, 18 Sep 2020 16:53:10 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E4%BC%98%E7%A7%80%E7%9A%84golang%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/</guid>
      <description>golang学习之路 golang学习电子书籍 飞雪无情 李文周的博客 李文周的视频课程 Golang新开发者要注意的陷阱和常见错误 Tony Bai 曹春晖 鸟窝 draveness 码农桃花源 go语言原本 go夜读 常用文件操作 Practical-go-lessons</description>
    </item>
    
    <item>
      <title>阿里云自定义权限文档</title>
      <link>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E6%96%87%E6%A1%A3/</guid>
      <description>https://help.aliyun.com/document_detail/93739.html</description>
    </item>
    
    <item>
      <title>Jenkins Slave节点乱码问题</title>
      <link>http://luwen.tech/post/jenkins-slave%E8%8A%82%E7%82%B9%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 16 Sep 2020 23:50:53 +0800</pubDate>
      
      <guid>http://luwen.tech/post/jenkins-slave%E8%8A%82%E7%82%B9%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>jenkins配置slave进行构建时，发现slave构建的控制台输入中文乱码，查看master，slave的jenkins系统信息file.encoding和sun.jnu.encoding都没有问题，从系统管理-&amp;gt;节点管理-&amp;gt;slave节点-&amp;gt;系统信息 file.encoding=ANSI_X3.4-1968 sun.jnu.encoding=ANSI_X3.4-1968 #</description>
    </item>
    
    <item>
      <title>网站性能指标</title>
      <link>http://luwen.tech/post/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</link>
      <pubDate>Wed, 16 Sep 2020 16:03:07 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</guid>
      <description>并发数、吞吐量的概念最初用来衡量网络设备的性能，后来推广到服务器及业务上评估系统的整体性能。 一、网络设备的并发数、吞吐量 并发数（Concurrency）****： 也叫并发连接数，指网络设备所能处理的最大会话数量。这里的会话数是指请求-&amp;gt;响应一次会话。 吞吐量**（Throug</description>
    </item>
    
    <item>
      <title>Nginx Conf</title>
      <link>http://luwen.tech/post/nginx-conf/</link>
      <pubDate>Tue, 08 Sep 2020 22:27:31 +0800</pubDate>
      
      <guid>http://luwen.tech/post/nginx-conf/</guid>
      <description>#强制跳转到https server { listen 80; server_name www.luwen.tech; rewrite ^(.*)$ https://www.luwen.tech$1 permanent; } #luwen.tech跳转为www.luwen.tech #https配置 server { listen 80; listen 443 ssl; charset utf-8; ssl on; ssl_certificate cert/all.luwen.tech.pem; ssl_certificate_key cert/all.luwen.tech.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; server_name luwen.tech; rewrite ^/shengxian/ https://www.luwen.tech/xy/c-$arg_p.html? permanent; rewrite ^/shengxian(\d+)\.html$ https://www.luwen.tech/xy/c-$1.html permanent; rewrite ^(.*)$ https://www.luwen.tech$1 permanent; } server { listen 443 ssl; server_name www.luwen.tech; charset utf-8; ssl on; ssl_certificate cert/all.luwen.tech.pem; ssl_certificate_key cert/all.luwen.tech.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; deny 120.239.22.36; root /data/vip/luwen/code/web; index index.php index.html; #阿里云获取真实客户</description>
    </item>
    
    <item>
      <title>常见web安全攻防</title>
      <link>http://luwen.tech/post/%E5%B8%B8%E8%A7%81web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</link>
      <pubDate>Fri, 04 Sep 2020 11:45:55 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E5%B8%B8%E8%A7%81web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</guid>
      <description>在互联网时代，数据安全与个人隐私受到了前所未有的挑战，各种新奇的攻击技术层出不穷。如何才能更好地保护我们的数据？本文主要侧重于分析几种常见的攻击的类型以及防御的方法。 一、XSS XSS (Cross-Site Scripting)，跨站脚本攻击，因为缩写和 CSS重叠，所以只能叫 XSS。跨站脚本攻击是指通过存在</description>
    </item>
    
    <item>
      <title>Robots文件语法</title>
      <link>http://luwen.tech/post/robots%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 01 Sep 2020 17:50:45 +0800</pubDate>
      
      <guid>http://luwen.tech/post/robots%E6%96%87%E4%BB%B6%E8%AF%AD%E6%B3%95/</guid>
      <description>前言 搜索引擎通过网络蜘蛛抓取网页的内容，并展示在相关的搜索结果中。但是有些网页内容我们可能并不想被搜索引擎收录和索引，如管理员后台等。 我们就可以通过 robots.txt 文件来声明允许/禁止搜索引擎的蜘蛛抓取某些目录或网页，从而限制搜索引擎的收录范围。 本文就介绍下网站的 robots.txt 文件的配置和使用方法，以及如</description>
    </item>
    
    <item>
      <title>SpringBoot使用Micrometer集成Prometheus监控Jvm</title>
      <link>http://luwen.tech/post/SpringBoot%E4%BD%BF%E7%94%A8Micrometer%E9%9B%86%E6%88%90Prometheus%E7%9B%91%E6%8E%A7Jvm/</link>
      <pubDate>Tue, 25 Aug 2020 11:02:10 +0800</pubDate>
      
      <guid>http://luwen.tech/post/SpringBoot%E4%BD%BF%E7%94%A8Micrometer%E9%9B%86%E6%88%90Prometheus%E7%9B%91%E6%8E%A7Jvm/</guid>
      <description>k8s使用kube-prometheus监控,已经创建好serviceMonitor crd,下面步骤实现在k8s集群中的prometheus监控集群中的springboot jvm。 1.创建jvm serviceMonitor apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: jvm-monitor namespace: monitoring spec: endpoints: - port: http #获取监控metric port，这里用的80，可以定义多</description>
    </item>
    
    <item>
      <title>Docker镜像精简</title>
      <link>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E7%B2%BE%E7%AE%80/</link>
      <pubDate>Thu, 13 Aug 2020 14:48:13 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E7%B2%BE%E7%AE%80/</guid>
      <description>##构建更小体积镜像 使用更小的基础镜像 Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐。在保持瘦身的同时，Alpine 还提供了自己的包管理工具 apk，可</description>
    </item>
    
    <item>
      <title>Mysql按日期分表</title>
      <link>http://luwen.tech/post/mysql%E6%8C%89%E6%97%A5%E6%9C%9F%E5%88%86%E8%A1%A8/</link>
      <pubDate>Wed, 12 Aug 2020 09:42:44 +0800</pubDate>
      
      <guid>http://luwen.tech/post/mysql%E6%8C%89%E6%97%A5%E6%9C%9F%E5%88%86%E8%A1%A8/</guid>
      <description>###线上数据库历史订单记录表比较大，800多W条记录，频繁查询容易占用系统资源，按日期分表过程如下： 原表order记录数8501257 select count(1) from `order`; +----------+ | count(1) | +----------+ | 8501257 | +----------+ 创建临时新表并复制表结构： create table order_new like `order`; 重命名原表、改新表改名 rename table `order` to order_20200814; rename table order_new to `order`; 按业务需求导入数据 INSERT INTO `order`() SELECT * FROM order_20200814 WHERE CREATE_DATE &amp;gt; &amp;#39;2020-07-14</description>
    </item>
    
    <item>
      <title>Linux命令</title>
      <link>http://luwen.tech/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 21 Jul 2020 23:00:24 +0800</pubDate>
      
      <guid>http://luwen.tech/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>###https检测 curl -vosa --resolve [image.xxxx.com:443:58.20.197.102](http://image.xxxx.com:443:58.20.197.102) https://image.xxxx.com/group_5.1.0/upload_pic/com_thumb_2020022918342000e3f9255e5a3e2c25ac3.jpg 查看响应时间： curl -va -o /dev/null -s -w %{time_namelookup}:%{time_connect}:%{time_starttransfer}:%{time_total} https://image.xxxx.com/website linux进程按启动时间排序 ps aux --sort=lstart ps aux --sort=start_time cd /proc; ls -td --full-time --time-style=+%s [0123456789]*;</description>
    </item>
    
    <item>
      <title>Golang语法要点</title>
      <link>http://luwen.tech/post/golang%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9/</link>
      <pubDate>Thu, 09 Jul 2020 19:51:59 +0800</pubDate>
      
      <guid>http://luwen.tech/post/golang%E8%AF%AD%E6%B3%95%E8%A6%81%E7%82%B9/</guid>
      <description>golang的单引号和双引号： 在Go中，双引号是用来表示字符串string，其实质是一个byte类型的数组，单引号表示rune类型。 go语言中的函数和方法： 在Go语言中，函数和方法不太一样，有明确的概念区分。其他语言中，比如Java，一般来说，函数就是方法，方法就是函数，但是在G</description>
    </item>
    
    <item>
      <title>K8s污点和容忍</title>
      <link>http://luwen.tech/post/k8s%E6%B1%A1%E7%82%B9%E5%92%8C%E5%AE%B9%E5%BF%8D/</link>
      <pubDate>Thu, 11 Jun 2020 16:05:51 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E6%B1%A1%E7%82%B9%E5%92%8C%E5%AE%B9%E5%BF%8D/</guid>
      <description>Kubernetes Pod调度进阶：Taints(污点)和Tolerations(容忍) 污点(Taint)和容忍(Toleration)是从Kubernetes 1.6开始提供的高级调度功能。 在Kubernetes的文档中Taints and Tolerations的介绍已经十分详细。 本文将从简单理解的角度</description>
    </item>
    
    <item>
      <title>Docker最佳实践</title>
      <link>http://luwen.tech/post/docker%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 03 Jun 2020 10:07:38 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>如何编写最佳的Dockerfile 译者按: Dockerfile 的语法非常简单，然而如何加快镜像构建速度，如何减少 Docker 镜像的大小却不是那么直观，需要积累实践经验。这篇博客可以帮助你快速掌握编写 Dockerfile 的技巧。 原文: How to write excellent Dockerfiles 译者: Fundebug 本文采用意译，版权归原作者所有 我已经使用 Docker 有一段时间了，其中编写 Dockerfile 是非常重要</description>
    </item>
    
    <item>
      <title>Docker大小</title>
      <link>http://luwen.tech/post/docker%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Wed, 03 Jun 2020 09:58:06 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E5%A4%A7%E5%B0%8F/</guid>
      <description>深刻理解 Docker 镜像大小 「Allen 谈 Docker 系列」 DaoCloud 正在启动 Docker 技术系列文章，每周都会为大家推送一期真材实料的精选 Docker 文章。主讲人为 DaoCloud 核心开发团队成员 Allen（孙宏亮），他是 InfoQ 「Docker 源码分析」专栏作者，已出版《Docker 源码分析》一书。Allen 接触 Docker 近两年，爱钻研系统实现原理，及</description>
    </item>
    
    <item>
      <title>Docker镜像操作</title>
      <link>http://luwen.tech/post/docker%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Tue, 02 Jun 2020 20:37:13 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E8%BF%90%E8%A1%8C/</guid>
      <description>运行容器的最佳做法 本文介绍使容器易于操作的一系列最佳做法。这些做法涉及从安全性到监控和日志记录的各种主题，其目标在于使应用更容易在 Google Kubernetes Engine 和一般容器中运行。本文介绍的许多做法都受到十二要素方法的启发，此方法是构建云原生应用的一种优秀资源。 这些最佳做法的重要性并不相同。例如，成功运行</description>
    </item>
    
    <item>
      <title>Docker镜像</title>
      <link>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Tue, 02 Jun 2020 20:36:48 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA/</guid>
      <description>构建容器的最佳做法 本文介绍构建容器的一系列最佳做法。这些做法涵盖了广泛的目标（从缩短构建时间到创建更小、弹性更佳的映像），旨在使容器更加容易构建（例如，使用 Cloud Build），并且更加容易在 Google Kubernetes Engine (GKE) 中运行。 这些最佳做法的重要性并不相同。例如，成功运行某一生产工作负载可能无需其中某些做</description>
    </item>
    
    <item>
      <title>Docker经典命令</title>
      <link>http://luwen.tech/post/docker%E7%BB%8F%E5%85%B8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 09 May 2020 16:12:10 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E7%BB%8F%E5%85%B8%E5%91%BD%E4%BB%A4/</guid>
      <description>#docker 在宿主机上根据进程PID查找归属容器ID ###在使用docker时经常出现一台docker主机上跑了多个容器，可能其中一个容器里的进程导致了整个宿主机load很高，其实一条命令就可以找出罪魁祸首 ###查找容器id docker inspect -f &amp;#34;{{.Id}} {{.State.Pid}}&amp;#34; $(docker ps -q) |grep &amp;lt;PID&amp;gt; ###查找k8s pod name docker inspect -f &amp;#34;{{.Id}} {{.State.Pid}} {{.Config.Hostname}}&amp;#34; $(docker ps -q) |grep &amp;lt;PID&amp;gt; ##</description>
    </item>
    
    <item>
      <title>K8s进程排查</title>
      <link>http://luwen.tech/post/k8s%E8%BF%9B%E7%A8%8B%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Tue, 14 Apr 2020 01:45:18 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E8%BF%9B%E7%A8%8B%E6%8E%92%E6%9F%A5/</guid>
      <description>在使用docker时经常出现一台docker主机上跑了多个容器，可能其中一个容器里的进程导致了整个宿主机load很高，其实一条命令就可以找出罪魁祸首 #查找容器ID docker inspect -f &amp;quot;{{.Id}} {{.State.Pid}} {{.Name}} &amp;quot; $(docker ps -q) |grep #查找k8s pod name docker inspect -f &amp;quot;{{.Id}} {{.State.Pid}} {{.Config.Hostname}}&amp;quot; $(docker ps -q) |grep #如果PID是容器内运行子进程那docker inspect就</description>
    </item>
    
    <item>
      <title>云原生</title>
      <link>http://luwen.tech/post/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Mon, 13 Apr 2020 17:54:08 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description>不要直接部署裸的Pod。 为工作负载选择合适的Controller。 使用Init容器确保应用程序被正确的初始化。 在应用程序工作负载启动之前先启动service。 使用Deployment history来回滚到历史版本。 使用ConfigMap和Secret来存储配置。 在Pod里增加Re</description>
    </item>
    
    <item>
      <title>Prometheus</title>
      <link>http://luwen.tech/post/prometheus/</link>
      <pubDate>Tue, 07 Jan 2020 22:34:52 +0800</pubDate>
      
      <guid>http://luwen.tech/post/prometheus/</guid>
      <description>自定义exporter实现 Concepts Data model prometheus 原理上以Time_series 的方式存储数据。流的时间戳值属于同样的度量和同样的标记维度。 Metric names and labels metric name 指定了系统的一般特性,比如http_request_total 表示全部接收到的HTTP请求。 Label启用了Prometheus的多维数据模型，</description>
    </item>
    
    <item>
      <title>Docker构建镜像</title>
      <link>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 26 Nov 2019 17:48:59 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4/</guid>
      <description>指定国内源build镜像 docker build &amp;ndash;build-arg APT_MIRROR=&amp;ldquo;http://mirrors.163.com&amp;rdquo; -t openapi:v1.1 .</description>
    </item>
    
    <item>
      <title>Prometheus Operator</title>
      <link>http://luwen.tech/post/prometheus-operator/</link>
      <pubDate>Fri, 15 Nov 2019 17:50:35 +0800</pubDate>
      
      <guid>http://luwen.tech/post/prometheus-operator/</guid>
      <description>Prometheus Operator 中所有的 API 对象都是 CRD 中定义好的 Schema，API Server会校验。当开发者使用 ConfigMap 保存配置没有任何校验，配置文件写错时，自表现为功能不可用，问题排查复杂。在 Prometheus Operator 中，所有在 Prometheus 对象、ServiceMonitor 对象、PrometheusRule 对象中的配置都是有 Schema 校验的，校验失</description>
    </item>
    
    <item>
      <title>Redis慢分析</title>
      <link>http://luwen.tech/post/redis%E6%85%A2%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 14 Nov 2019 18:11:41 +0800</pubDate>
      
      <guid>http://luwen.tech/post/redis%E6%85%A2%E5%88%86%E6%9E%90/</guid>
      <description>Redis 是一种内存数据库，将数据保存在内存中，读写效率要比传统的将数据保存在磁盘上的数据库要快很多。但是 Redis 也会发生延迟时，这是就需要我们对其产生原因有深刻的了解，以便于快速排查问题，解决 Redis的延迟问题 一条命令执行过程 在本文场景下，延迟 (latency) 是指从客户端发送命令到客户端接收到命令返回值</description>
    </item>
    
    <item>
      <title>K8s多集群管理</title>
      <link>http://luwen.tech/post/k8s%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 14 Nov 2019 14:32:30 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</guid>
      <description>当前您可以在容器服务控制台集群详情页面，获取到当前登录用户对指定集群的 kubeconfig 访问凭证，或者通过调用 openapi KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten &amp;gt; ~/.kube/all-config export KUBECONFIG=~/.kube/all-config 执行如下命令，查看所有的可使用的 context 上下文。 kubectl config get-contexts 执行如下命令，查看 config 配置的帮助信息。 kubectl config --help 执行如下命令，切换 context 上下文配置。 kubectl config use-context {your-contexts}</description>
    </item>
    
    <item>
      <title>配置kong发现linux系统limit文件作用域问题</title>
      <link>http://luwen.tech/post/%E9%85%8D%E7%BD%AEkong%E5%8F%91%E7%8E%B0linux%E7%B3%BB%E7%BB%9Flimit%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 03 Nov 2019 10:38:36 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E9%85%8D%E7%BD%AEkong%E5%8F%91%E7%8E%B0linux%E7%B3%BB%E7%BB%9Flimit%E6%96%87%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>###配置kong网关，修改nginx.conf文件的worker_rlimit_nofile 65535；worker_connections 65535；参数后重启linux系统参数会变成1024. 查阅资料发现，kong网关的这两个参数是根据linux系统的ulimit 值来设置的</description>
    </item>
    
    <item>
      <title>Apollo总体设计</title>
      <link>http://luwen.tech/post/apollo%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 29 Oct 2019 14:53:26 +0800</pubDate>
      
      <guid>http://luwen.tech/post/apollo%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>Config Service提供配置的读取、推送等功能，服务对象是Apollo客户端 Admin Service提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面） Config Service和Admin Service都是多实例、无状态部署，所以需要将自己注册到Eureka中并保持心跳 在Eur</description>
    </item>
    
    <item>
      <title>K8s持续集成和发布</title>
      <link>http://luwen.tech/post/k8s%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%8F%91%E5%B8%83/</link>
      <pubDate>Tue, 29 Oct 2019 09:31:52 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%8F%91%E5%B8%83/</guid>
      <description>应用构建和发布流程说明。 用户向Gitlab提交代码，代码中必须包含Dockerfile 将代码提交到远程仓库 用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建 Jenkins的CI流水线自动编译代码并打包成docke</description>
    </item>
    
    <item>
      <title>K8s Token</title>
      <link>http://luwen.tech/post/k8s-token/</link>
      <pubDate>Mon, 28 Oct 2019 00:22:58 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s-token/</guid>
      <description>kubectl get sa admin -n kube-system -o yaml apiVersion: v1 kind: ServiceAccount metadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ServiceAccount&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;kube-system&amp;quot;}} creationTimestamp: 2018-11-05T09:23:39Z name: admin namespace: kube-system resourceVersion: &amp;quot;889&amp;quot; selfLink: /api/v1/namespaces/kube-system/serviceaccounts/admin uid: 7af4f177-e0dc-11e8-8ef4-00163e009d2a secrets: - name: admin-token-5tctj 查看对应的clusterrolebinding： kubectl get clusterrolebinding admin -oyaml apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | {&amp;quot;apiVersion&amp;quot;:&amp;quot;rbac.authorization.k8s.io/v1beta1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ClusterRoleBinding&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;roleRef&amp;quot;:{&amp;quot;apiGroup&amp;quot;:&amp;quot;rbac.authorization.k8s.io&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ClusterRole&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;cluster-admin&amp;quot;},&amp;quot;subjects&amp;quot;:[{&amp;quot;kind&amp;quot;:&amp;quot;ServiceAccount&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;kube-system&amp;quot;}]} creationTimestamp: 2018-11-05T09:23:39Z name: admin resourceVersion: &amp;quot;886&amp;quot; selfLink: /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/admin uid: 7af6ff9d-e0dc-11e8-8ef4-00163e009d2a roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin namespace: kube-system 查看admin sa绑定的clusterrole和对应的权限。命令： kubectl get clusterrole cluster-admin -o yaml apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:</description>
    </item>
    
    <item>
      <title>解决golang依赖包问题</title>
      <link>http://luwen.tech/post/%E8%A7%A3%E5%86%B3golang%E4%BE%9D%E8%B5%96%E5%8C%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 20 Oct 2019 11:24:39 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E8%A7%A3%E5%86%B3golang%E4%BE%9D%E8%B5%96%E5%8C%85%E9%97%AE%E9%A2%98/</guid>
      <description>问题描述 当我们使用 go get、go install、go mod 等命令时，会自动下载相应的包或依赖包。但由于众所周知的原因，类似于 golang.org/x/&amp;hellip; 的包会出现下载失败的情况。如下所示： 123 $ go get -u golang.org/x/sysgo get golang.org/x/sys: unrecognized import path &amp;ldquo;golang.org/x/sys&amp;rdquo; (https fetch: Get https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.1:443: i/o timeout) 解决方式 那我们该如何解决问题呢？毕竟还要制造 bug 的嘛~ 手动下载 我们常见的 golang.org/x/&amp;hellip; 包，一般</description>
    </item>
    
    <item>
      <title>Kubernetes弹性伸缩</title>
      <link>http://luwen.tech/post/kubernetes%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9/</link>
      <pubDate>Mon, 14 Oct 2019 14:02:43 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9/</guid>
      <description>自动弹性伸缩(AutoScaling)，是Kubernetes的一大功能和亮点。在OpenStack IaaS云计算中也有类似的服务，即Senlin。即基于资源使用情况自动弹性缩容和扩容工作负载。Kubernetes的自动弹性伸缩有两个维度： Cluster Autoscaler：处理K8s集群N</description>
    </item>
    
    <item>
      <title>Rds优化</title>
      <link>http://luwen.tech/post/rds%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sat, 12 Oct 2019 10:08:04 +0800</pubDate>
      
      <guid>http://luwen.tech/post/rds%E4%BC%98%E5%8C%96/</guid>
      <description>事务长事务的防范手段。参数loose_max_statement_time可以控制大查询的最大执行时间，超过这个时间后，会把查询kill掉。参数loose_rds_strict_trx_idle_timeout可以控制空闲事务的最长存活时间，当一个事务空闲状态超过这个值时候，会主</description>
    </item>
    
    <item>
      <title>Kubernetes常用命令</title>
      <link>http://luwen.tech/post/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 29 Sep 2019 13:49:25 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1.查看资源占用： kubectl describe node &amp;ldquo;cn-beijing.172.16.89.154&amp;rdquo; | sed &amp;lsquo;1,/Non-terminated Pods/d&amp;rsquo; 2.进入pod Kubectl exec -it pod -n namespace /bin/bash 3.查看pod资源消耗 Kubectl top pod -n prod 4.kubectl get nodes &amp;ndash;show-labels 5.kubectl get nodes 4.删除evicted状态pod kubectl get pods | grep Evicted | awk &amp;lsquo;{print $1}&amp;rsquo; | xargs kubectl delete pod 指定 Node 节点调度 有三种方式指定 Pod 只运行在指定的 Node 节点上 nodeSelector：只调度到匹配指定 label 的 Node 上 node</description>
    </item>
    
    <item>
      <title>Kubernetes探针最佳实践</title>
      <link>http://luwen.tech/post/kubernetes%E6%8E%A2%E9%92%88%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 20 Aug 2019 08:57:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E6%8E%A2%E9%92%88%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>1. 存活和就绪的结果处理程序需要是互相独立的程序 如前所述，对于在Kubernetes上下文中部署的每个产品，应该实现2个分别处理HTTP请求“存活”和“就绪”的处理程序。这些探测器的处理程序需要独立实现自己的功能。 这适用于作业处理应用程序。对于Kubernetes，了解应用程序是否</description>
    </item>
    
    <item>
      <title>Kubernets资源限制</title>
      <link>http://luwen.tech/post/kubernetes%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</link>
      <pubDate>Thu, 15 Aug 2019 21:52:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</guid>
      <description>###普通应用资源限制 resources: limits: cpu: 100m memory: 1024Mi requests: cpu: 50m memory: 512Mi java jdk 8部分版本和更新版本的应用资源限制： env: - name: JAVA_OPTS value: &amp;#34;-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&amp;#34; resources: limits: cpu: 100m memory: 1024Mi requests: cpu: 50m memory: 512Mi</description>
    </item>
    
    <item>
      <title>阿里云Kubernetes服务日志收集方案</title>
      <link>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 09 Aug 2019 16:16:24 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</guid>
      <description>Kubernetes集群中的日志收集 通用做法： 方案 优点 缺点 每个app的镜像中都集成日志收集组件 部署方便，kubernetes的yaml文件无须特别配置，可以为每个app自定义日志收集配置 强耦合，不方便应用和日志收集组件升级和维护且会导致镜像过大 单独创建一个日志收集组件跟app的容</description>
    </item>
    
  </channel>
</rss>
