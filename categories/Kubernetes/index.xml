<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on 卢文的博客</title>
    <link>http://luwen.tech/categories/Kubernetes/</link>
    <description>Recent content in Kubernetes on 卢文的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 11 Jun 2020 16:05:51 +0800</lastBuildDate>
    
	<atom:link href="http://luwen.tech/categories/Kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>K8s污点和容忍</title>
      <link>http://luwen.tech/post/k8s%E6%B1%A1%E7%82%B9%E5%92%8C%E5%AE%B9%E5%BF%8D/</link>
      <pubDate>Thu, 11 Jun 2020 16:05:51 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E6%B1%A1%E7%82%B9%E5%92%8C%E5%AE%B9%E5%BF%8D/</guid>
      <description>Kubernetes Pod调度进阶：Taints(污点)和Tolerations(容忍) 污点(Taint)和容忍(Toleration)是从Kubernetes 1.6开始提供的高级调度功能。 在Kubernetes的文档中Taints and Tolerations的介绍已经十分详细。 本文将从简单理解的角度</description>
    </item>
    
    <item>
      <title>K8s进程排查</title>
      <link>http://luwen.tech/post/k8s%E8%BF%9B%E7%A8%8B%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Tue, 14 Apr 2020 01:45:18 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E8%BF%9B%E7%A8%8B%E6%8E%92%E6%9F%A5/</guid>
      <description>在使用docker时经常出现一台docker主机上跑了多个容器，可能其中一个容器里的进程导致了整个宿主机load很高，其实一条命令就可以找出罪魁祸首 #查找容器ID docker inspect -f &amp;quot;{{.Id}} {{.State.Pid}} {{.Name}} &amp;quot; $(docker ps -q) |grep #查找k8s pod name docker inspect -f &amp;quot;{{.Id}} {{.State.Pid}} {{.Config.Hostname}}&amp;quot; $(docker ps -q) |grep #如果PID是容器内运行子进程那docker inspect就</description>
    </item>
    
    <item>
      <title>云原生</title>
      <link>http://luwen.tech/post/%E4%BA%91%E5%8E%9F%E7%94%9F/</link>
      <pubDate>Mon, 13 Apr 2020 17:54:08 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E4%BA%91%E5%8E%9F%E7%94%9F/</guid>
      <description>不要直接部署裸的Pod。 为工作负载选择合适的Controller。 使用Init容器确保应用程序被正确的初始化。 在应用程序工作负载启动之前先启动service。 使用Deployment history来回滚到历史版本。 使用ConfigMap和Secret来存储配置。 在Pod里增加Re</description>
    </item>
    
    <item>
      <title>Prometheus Operator</title>
      <link>http://luwen.tech/post/prometheus-operator/</link>
      <pubDate>Fri, 15 Nov 2019 17:50:35 +0800</pubDate>
      
      <guid>http://luwen.tech/post/prometheus-operator/</guid>
      <description>Prometheus Operator 中所有的 API 对象都是 CRD 中定义好的 Schema，API Server会校验。当开发者使用 ConfigMap 保存配置没有任何校验，配置文件写错时，自表现为功能不可用，问题排查复杂。在 Prometheus Operator 中，所有在 Prometheus 对象、ServiceMonitor 对象、PrometheusRule 对象中的配置都是有 Schema 校验的，校验失</description>
    </item>
    
    <item>
      <title>K8s多集群管理</title>
      <link>http://luwen.tech/post/k8s%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 14 Nov 2019 14:32:30 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E5%A4%9A%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86/</guid>
      <description>当前您可以在容器服务控制台集群详情页面，获取到当前登录用户对指定集群的 kubeconfig 访问凭证，或者通过调用 openapi KUBECONFIG=file1:file2:file3 kubectl config view --merge --flatten &amp;gt; ~/.kube/all-config export KUBECONFIG=~/.kube/all-config 执行如下命令，查看所有的可使用的 context 上下文。 kubectl config get-contexts 执行如下命令，查看 config 配置的帮助信息。 kubectl config --help 执行如下命令，切换 context 上下文配置。 kubectl config use-context {your-contexts}</description>
    </item>
    
    <item>
      <title>Apollo总体设计</title>
      <link>http://luwen.tech/post/apollo%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 29 Oct 2019 14:53:26 +0800</pubDate>
      
      <guid>http://luwen.tech/post/apollo%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>Config Service提供配置的读取、推送等功能，服务对象是Apollo客户端 Admin Service提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面） Config Service和Admin Service都是多实例、无状态部署，所以需要将自己注册到Eureka中并保持心跳 在Eur</description>
    </item>
    
    <item>
      <title>K8s持续集成和发布</title>
      <link>http://luwen.tech/post/k8s%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%8F%91%E5%B8%83/</link>
      <pubDate>Tue, 29 Oct 2019 09:31:52 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%92%8C%E5%8F%91%E5%B8%83/</guid>
      <description>应用构建和发布流程说明。 用户向Gitlab提交代码，代码中必须包含Dockerfile 将代码提交到远程仓库 用户在发布应用时需要填写git仓库地址和分支、服务类型、服务名称、资源数量、实例个数，确定后触发Jenkins自动构建 Jenkins的CI流水线自动编译代码并打包成docke</description>
    </item>
    
    <item>
      <title>K8s Token</title>
      <link>http://luwen.tech/post/k8s-token/</link>
      <pubDate>Mon, 28 Oct 2019 00:22:58 +0800</pubDate>
      
      <guid>http://luwen.tech/post/k8s-token/</guid>
      <description>kubectl get sa admin -n kube-system -o yaml apiVersion: v1 kind: ServiceAccount metadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | {&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ServiceAccount&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;kube-system&amp;quot;}} creationTimestamp: 2018-11-05T09:23:39Z name: admin namespace: kube-system resourceVersion: &amp;quot;889&amp;quot; selfLink: /api/v1/namespaces/kube-system/serviceaccounts/admin uid: 7af4f177-e0dc-11e8-8ef4-00163e009d2a secrets: - name: admin-token-5tctj 查看对应的clusterrolebinding： kubectl get clusterrolebinding admin -oyaml apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: annotations: kubectl.kubernetes.io/last-applied-configuration: | {&amp;quot;apiVersion&amp;quot;:&amp;quot;rbac.authorization.k8s.io/v1beta1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ClusterRoleBinding&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;annotations&amp;quot;:{},&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;&amp;quot;},&amp;quot;roleRef&amp;quot;:{&amp;quot;apiGroup&amp;quot;:&amp;quot;rbac.authorization.k8s.io&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;ClusterRole&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;cluster-admin&amp;quot;},&amp;quot;subjects&amp;quot;:[{&amp;quot;kind&amp;quot;:&amp;quot;ServiceAccount&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;admin&amp;quot;,&amp;quot;namespace&amp;quot;:&amp;quot;kube-system&amp;quot;}]} creationTimestamp: 2018-11-05T09:23:39Z name: admin resourceVersion: &amp;quot;886&amp;quot; selfLink: /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/admin uid: 7af6ff9d-e0dc-11e8-8ef4-00163e009d2a roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin namespace: kube-system 查看admin sa绑定的clusterrole和对应的权限。命令： kubectl get clusterrole cluster-admin -o yaml apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata:</description>
    </item>
    
    <item>
      <title>Kubernetes弹性伸缩</title>
      <link>http://luwen.tech/post/kubernetes%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9/</link>
      <pubDate>Mon, 14 Oct 2019 14:02:43 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E5%BC%B9%E6%80%A7%E4%BC%B8%E7%BC%A9/</guid>
      <description>自动弹性伸缩(AutoScaling)，是Kubernetes的一大功能和亮点。在OpenStack IaaS云计算中也有类似的服务，即Senlin。即基于资源使用情况自动弹性缩容和扩容工作负载。Kubernetes的自动弹性伸缩有两个维度： Cluster Autoscaler：处理K8s集群N</description>
    </item>
    
    <item>
      <title>Kubernetes常用命令</title>
      <link>http://luwen.tech/post/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 29 Sep 2019 13:49:25 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1.查看资源占用： kubectl describe node &amp;ldquo;cn-beijing.172.16.89.154&amp;rdquo; | sed &amp;lsquo;1,/Non-terminated Pods/d&amp;rsquo; 2.进入pod Kubectl exec -it pod -n namespace /bin/bash 3.查看pod资源消耗 Kubectl top pod -n prod 4.kubectl get nodes &amp;ndash;show-labels 5.kubectl get nodes 指定 Node 节点调度 有三种方式指定 Pod 只运行在指定的 Node 节点上 nodeSelector：只调度到匹配指定 label 的 Node 上 nodeAffinity：功能更丰富的 Node 选择器，比如支持集合操作 pod</description>
    </item>
    
    <item>
      <title>Kubernetes探针最佳实践</title>
      <link>http://luwen.tech/post/kubernetes%E6%8E%A2%E9%92%88%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 20 Aug 2019 08:57:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E6%8E%A2%E9%92%88%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>1. 存活和就绪的结果处理程序需要是互相独立的程序 如前所述，对于在Kubernetes上下文中部署的每个产品，应该实现2个分别处理HTTP请求“存活”和“就绪”的处理程序。这些探测器的处理程序需要独立实现自己的功能。 这适用于作业处理应用程序。对于Kubernetes，了解应用程序是否</description>
    </item>
    
    <item>
      <title>Kubernets资源限制</title>
      <link>http://luwen.tech/post/kubernetes%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</link>
      <pubDate>Thu, 15 Aug 2019 21:52:19 +0800</pubDate>
      
      <guid>http://luwen.tech/post/kubernetes%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6/</guid>
      <description>###普通应用资源限制 resources: limits: cpu: 100m memory: 1024Mi requests: cpu: 50m memory: 512Mi java jdk 8部分版本和更新版本的应用资源限制： env: - name: JAVA_OPTS value: &amp;quot;-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&amp;quot; resources: limits: cpu: 100m memory: 1024Mi requests: cpu: 50m memory: 512Mi</description>
    </item>
    
    <item>
      <title>阿里云Kubernetes服务日志收集方案</title>
      <link>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</link>
      <pubDate>Fri, 09 Aug 2019 16:16:24 +0800</pubDate>
      
      <guid>http://luwen.tech/post/%E9%98%BF%E9%87%8C%E4%BA%91k8s%E6%9C%8D%E5%8A%A1%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</guid>
      <description>Kubernetes集群中的日志收集 通用做法： 方案 优点 缺点 每个app的镜像中都集成日志收集组件 部署方便，kubernetes的yaml文件无须特别配置，可以为每个app自定义日志收集配置 强耦合，不方便应用和日志收集组件升级和维护且会导致镜像过大 单独创建一个日志收集组件跟app的容</description>
    </item>
    
  </channel>
</rss>