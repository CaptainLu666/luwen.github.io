<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on 卢文的博客</title>
    <link>http://luwen.tech/categories/Docker/</link>
    <description>Recent content in Docker on 卢文的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 15 Jan 2021 23:57:37 +0800</lastBuildDate><atom:link href="http://luwen.tech/categories/Docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker镜像清理</title>
      <link>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E6%B8%85%E7%90%86/</link>
      <pubDate>Fri, 15 Jan 2021 23:57:37 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E6%B8%85%E7%90%86/</guid>
      <description>###1.dangling是一种特殊的，不会再被使用到的镜像，docker有专门清理dangling镜像的命令 docker image prune -f ###2.历史版本镜像直接使用docker删除镜像的命令即可 docker rmi [image] ###3.可以批量清除无用的镜像，且不会影响使用中的镜像和基础镜像 docker images | awk &#39;NR!=1{print $1&amp;quot;:&amp;quot;$2}&#39; | xargs docker rmi ###4.</description>
    </item>
    
    <item>
      <title>Docker镜像精简</title>
      <link>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E7%B2%BE%E7%AE%80/</link>
      <pubDate>Thu, 13 Aug 2020 14:48:13 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E9%95%9C%E5%83%8F%E7%B2%BE%E7%AE%80/</guid>
      <description>##构建更小体积镜像 使用更小的基础镜像 Alpine 操作系统是一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，因此得到开源社区越来越多的青睐。在保持瘦身的同时，Alpine 还提供了自己的包管理工具 apk，可</description>
    </item>
    
    <item>
      <title>Docker最佳实践</title>
      <link>http://luwen.tech/post/docker%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 03 Jun 2020 10:07:38 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>如何编写最佳的Dockerfile 译者按: Dockerfile 的语法非常简单，然而如何加快镜像构建速度，如何减少 Docker 镜像的大小却不是那么直观，需要积累实践经验。这篇博客可以帮助你快速掌握编写 Dockerfile 的技巧。 原文: How to write excellent Dockerfiles 译者: Fundebug 本文采用意译，版权归原作者所有 我已经使用 Docker 有一段时间了，其中编写 Dockerfile 是非常重要</description>
    </item>
    
    <item>
      <title>Docker大小</title>
      <link>http://luwen.tech/post/docker%E5%A4%A7%E5%B0%8F/</link>
      <pubDate>Wed, 03 Jun 2020 09:58:06 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E5%A4%A7%E5%B0%8F/</guid>
      <description>深刻理解 Docker 镜像大小 「Allen 谈 Docker 系列」 DaoCloud 正在启动 Docker 技术系列文章，每周都会为大家推送一期真材实料的精选 Docker 文章。主讲人为 DaoCloud 核心开发团队成员 Allen（孙宏亮），他是 InfoQ 「Docker 源码分析」专栏作者，已出版《Docker 源码分析》一书。Allen 接触 Docker 近两年，爱钻研系统实现原理，及</description>
    </item>
    
    <item>
      <title>Docker镜像操作</title>
      <link>http://luwen.tech/post/docker%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Tue, 02 Jun 2020 20:37:13 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E8%BF%90%E8%A1%8C/</guid>
      <description>运行容器的最佳做法 本文介绍使容器易于操作的一系列最佳做法。这些做法涉及从安全性到监控和日志记录的各种主题，其目标在于使应用更容易在 Google Kubernetes Engine 和一般容器中运行。本文介绍的许多做法都受到十二要素方法的启发，此方法是构建云原生应用的一种优秀资源。 这些最佳做法的重要性并不相同。例如，成功运行</description>
    </item>
    
    <item>
      <title>Docker镜像</title>
      <link>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA/</link>
      <pubDate>Tue, 02 Jun 2020 20:36:48 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA/</guid>
      <description>构建容器的最佳做法 本文介绍构建容器的一系列最佳做法。这些做法涵盖了广泛的目标（从缩短构建时间到创建更小、弹性更佳的映像），旨在使容器更加容易构建（例如，使用 Cloud Build），并且更加容易在 Google Kubernetes Engine (GKE) 中运行。 这些最佳做法的重要性并不相同。例如，成功运行某一生产工作负载可能无需其中某些做</description>
    </item>
    
    <item>
      <title>Docker经典命令</title>
      <link>http://luwen.tech/post/docker%E7%BB%8F%E5%85%B8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sat, 09 May 2020 16:12:10 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E7%BB%8F%E5%85%B8%E5%91%BD%E4%BB%A4/</guid>
      <description>#docker 在宿主机上根据进程PID查找归属容器ID ###在使用docker时经常出现一台docker主机上跑了多个容器，可能其中一个容器里的进程导致了整个宿主机load很高，其实一条命令就可以找出罪魁祸首 ###查找容器id docker inspect -f &amp;#34;{{.Id}} {{.State.Pid}}&amp;#34; $(docker ps -q) |grep &amp;lt;PID&amp;gt; ###查找k8s pod name docker inspect -f &amp;#34;{{.Id}} {{.State.Pid}} {{.Config.Hostname}}&amp;#34; $(docker ps -q) |grep &amp;lt;PID&amp;gt; ##</description>
    </item>
    
    <item>
      <title>Docker构建镜像</title>
      <link>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 26 Nov 2019 17:48:59 +0800</pubDate>
      
      <guid>http://luwen.tech/post/docker%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4/</guid>
      <description>指定国内源build镜像 docker build &amp;ndash;build-arg APT_MIRROR=&amp;ldquo;http://mirrors.163.com&amp;rdquo; -t openapi:v1.1 .</description>
    </item>
    
  </channel>
</rss>
